#!/bin/bash
set -euo pipefail

# ===============================================
# Pi5 Hub - Automated Backup Script
# ===============================================

# --- Configuration (from Ansible) ---
BACKUP_SRC_DIR1="{{ appdata_dir }}"
BACKUP_SRC_DIR2="{{ stacks_dir }}"
BACKUP_DST_DIR="{{ backups_dir }}"
RETENTION_DAYS={{ automation.backup_retention_days | default(7) }}
BASE_DIR="{{ base_dir }}"

# --- Script Logic ---
TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
FILENAME="$BACKUP_DST_DIR/backup-$TIMESTAMP.tar.gz"

# Define exclude patterns
EXCLUDE_OPTS="--exclude='appdata/jellyfin/cache' --exclude='appdata/immich/library/cache' --exclude='appdata/immich/thumbs'"

echo "Starting backup of $BACKUP_SRC_DIR1 and $BACKUP_SRC_DIR2..."

# Create a compressed archive of the source directories.
# The -C flag changes the directory, so the paths in the archive are relative (e.g., 'appdata/...' instead of '/opt/appdata/...').
# The exclude options are passed to tar.
tar $EXCLUDE_OPTS -czf "$FILENAME" -C "$BASE_DIR" "$(basename "$BACKUP_SRC_DIR1")" "$(basename "$BACKUP_SRC_DIR2")"

echo "Backup created successfully: $FILENAME"

echo "Cleaning up old backups (older than $RETENTION_DAYS days)..."

# Find and delete files in the destination directory that match the pattern and are older than the retention period.
find "$BACKUP_DST_DIR" -type f -name 'backup-*.tar.gz' -mtime +$RETENTION_DAYS -delete

echo "Cleanup complete."
echo "Backup process finished."