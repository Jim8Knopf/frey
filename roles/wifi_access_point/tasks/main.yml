---
# tasks file for wifi_access_point

- name: Assert required variables are defined
  ansible.builtin.assert:
    that:
      - wifi_ap_interface is defined
      - wifi_ap_ssid is defined
      - wifi_ap_password is defined
      - wifi_ap_country is defined
      - wifi_ap_ip is defined
      - wifi_ap_network is defined
      - wifi_client_interface is defined
    msg: "One or more required wifi_access_point variables are not set. Please check your configuration."

- name: Check wireless card capabilities for AP mode
  ansible.builtin.command:
    cmd: "iw list"
  register: iw_list_output
  changed_when: false
  failed_when: false # We do a custom check below

- name: Verify that AP mode is supported
  ansible.builtin.fail:
    msg: "ERROR: Your wireless hardware does not report AP mode support. Cannot proceed."
  when: "'AP' not in iw_list_output.stdout"
- name: Install required packages for WiFi AP
  ansible.builtin.apt:
    name:
      - hostapd
      - dnsmasq
      - iptables-persistent
      - rfkill
      - iw
    state: present
    update_cache: yes

- name: Check for systemd-resolved service
  ansible.builtin.stat:
    path: "/lib/systemd/system/systemd-resolved.service"
  register: resolved_service

- name: Disable systemd-resolved to prevent conflict with dnsmasq
  ansible.builtin.systemd:
    name: systemd-resolved
    state: stopped
    enabled: no
  when: resolved_service.stat.exists

- name: Ensure /etc/resolv.conf uses public DNS
  ansible.builtin.copy:
    dest: /etc/resolv.conf
    content: |
      nameserver 8.8.8.8
      nameserver 8.8.4.4
    force: yes # Overwrite symlink created by systemd-resolved
  when: resolved_service.stat.exists

- name: Configure NetworkManager to ignore the AP interface
  ansible.builtin.copy:
    dest: /etc/NetworkManager/conf.d/99-ansible-ap-ignore.conf
    content: |
      [keyfile]
      unmanaged-devices=interface-name:{{ wifi_ap_interface }}
    mode: '0644'
  notify: restart networkmanager

- name: Configure static IP for AP interface via dhcpcd
  ansible.builtin.template:
    src: dhcpcd.conf.j2
    dest: /etc/dhcpcd.conf
    owner: root
    group: root
    mode: '0644'
    backup: yes
  notify: restart dhcpcd

- name: Configure hostapd for WiFi AP
  ansible.builtin.template:
    src: hostapd.conf.j2
    dest: /etc/hostapd/hostapd.conf
    owner: root
    group: root
    mode: '0644'
  notify: restart hostapd

- name: Point hostapd daemon to its config file
  ansible.builtin.lineinfile:
    path: /etc/default/hostapd
    regexp: '^#?DAEMON_CONF='
    line: 'DAEMON_CONF="/etc/hostapd/hostapd.conf"'
  notify: restart hostapd

- name: Configure dnsmasq for DHCP and DNS
  ansible.builtin.template:
    src: dnsmasq.conf.j2
    dest: /etc/dnsmasq.conf
    owner: root
    group: root
    mode: '0644'
    backup: yes
  notify: restart dnsmasq

- name: Enable IP forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes

- name: Configure iptables rules
  ansible.builtin.template:
    src: iptables.rules.v4.j2
    dest: /etc/iptables/rules.v4
    owner: root
    group: root
    mode: '0644'
  notify: restart netfilter-persistent

- name: Unblock WiFi with rfkill
  ansible.builtin.command:
    cmd: "rfkill unblock wifi"
  changed_when: false

- name: Unmask and enable hostapd service
  ansible.builtin.systemd:
    name: hostapd
    masked: no
    enabled: yes

- name: Ensure AP services are running
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop:
    - dnsmasq
    - hostapd

- name: Gather service facts to check for Docker
  ansible.builtin.service_facts:

- name: Restart Docker to restore its network rules after iptables changes
  ansible.builtin.service:
    name: docker
    state: restarted
  when: "'docker.service' in ansible_facts.services"