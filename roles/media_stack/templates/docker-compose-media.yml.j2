# Compose file for the *arr stack. Configuration files are stored in the
# directory you launch the compose file on. Change to bind mounts if needed.
# All containers are ran with user and group ids of the main user and
# group to aviod permissions issues of downloaded files, please refer
# the read me file for more information.

#############################################################################
# NOTICE: We recently switched to using a .env file. PLEASE refer to the docs.
# https://github.com/TechHutTV/homelab/tree/main/media#docker-compose-and-env
#############################################################################

networks:
  servarrnetwork:
    name: servarrnetwork
    ipam:
      config:
        - subnet: 172.39.0.0/24

services:
#  gluetun:
#    image: qmcgaw/gluetun
#    container_name: gluetun
#    cap_add:
#      - NET_ADMIN
#    devices:
#      - /dev/net/tun:/dev/net/tun # If running on an LXC see readme for more info.
#    networks:
#      servarrnetwork:
#        ipv4_address: 172.39.0.2
#    {% if media_stack.vpn.enabled | default(false) -%}
#    ports:
#      - "{{ media_stack.vpn.port }}:{{ media_stack.vpn.port }}" # airvpn forwarded port, pulled from .env
#      - "8080:8080" # qbittorrent web interface
#      - "6881:6881" # qbittorrent torrent port
#      - "6789:6789" # nzbget
#      - "9696:9696" # prowlarr
#    {% endif -%}
#    volumes:
#      - ./gluetun:/gluetun
#    healthcheck:
#      test: ping -c 1 www.google.com || exit 1
#      interval: 20s
#      timeout: 10s
#      retries: 5
#    restart: unless-stopped

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    environment:
      - PUID={{ media_stack.media_uid }}
      - PGID={{ media_stack.media_gid }}
      - WEBUI_PORT={{ media_stack.services.qbittorrent.port }}
      - TZ={{ network.timezone }}
    {% if media_stack.vpn.enabled | default(false) -%}
      - TORRENTING_PORT={{ media_stack.vpn.port }} # airvpn forwarded port, pulled from .env
    {% endif -%}
    volumes:
      - "{{ media_stack.appdata_dir }}/qbittorrent:/config"
      - "{{ media_stack.downloads_dir }}:/downloads"
    {% if media_stack.vpn.enabled | default(false) -%}
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    network_mode: service:gluetun
    {% else -%}
    ports:
      - "{{ media_stack.services.qbittorrent.port }}:{{ media_stack.services.qbittorrent.port }}"
      - "6881:6881"
      - "6881:6881/udp"
    labels:
      - deunhealth.restart.on.unhealthy=true
      - "traefik.enable=true"
      - "traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.{{ media_stack.domain_name }}`)"
      - "traefik.http.routers.qbittorrent.entrypoints=web"
      - "traefik.http.services.qbittorrent.loadbalancer.server.port={{ media_stack.services.qbittorrent.port }}"
    {% endif -%}
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 60s
      retries: 3
      start_period: 20s
      timeout: 10s

  # See the 'qBittorrent Stalls with VPN Timeout' section for more information.
  deunhealth:
    image: qmcgaw/deunhealth
    container_name: deunhealth
    network_mode: "none"
    environment:
      - LOG_LEVEL=info
      - HEALTH_SERVER_ADDRESS=127.0.0.1:9999
      - TZ={{ network.timezone }}
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  nzbget:
    image: lscr.io/linuxserver/nzbget:latest
    container_name: nzbget
    environment:
      - PUID={{ user.uid }}
      - PGID={{ user.gid }}
      - TZ={{ network.timezone }}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./nzbget:/config
    {% if media_stack.vpn.enabled | default(false) -%}
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    network_mode: service:gluetun
    {% else -%}
    ports:
      - "{{ media_stack.services.nzbget.port }}:6789"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nzbget.rule=Host(`nzbget.{{ media_stack.domain_name }}`)"
      - "traefik.http.routers.nzbget.entrypoints=web"
      - "traefik.http.services.nzbget.loadbalancer.server.port={{ media_stack.services.nzbget.port }}"
    {% endif -%}

    restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID={{ user.uid }}
      - PGID={{ user.gid }}
      - TZ={{ network.timezone }}
    volumes:
      - "{{ media_stack.appdata_dir }}/prowlarr:/config"
    {% if media_stack.vpn.enabled | default(false) -%}
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    network_mode: service:gluetun
    {% else -%}
    ports:
      - "{{ media_stack.services.prowlarr.port }}:9696"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.{{ media_stack.domain_name }}`)"
      - "traefik.http.routers.prowlarr.entrypoints=web"
      - "traefik.http.services.prowlarr.loadbalancer.server.port={{ media_stack.services.prowlarr.port }}"
    {% endif -%}
    restart: unless-stopped

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    environment:
      - PUID={{ user.uid }}
      - PGID={{ user.gid }}
      - TZ={{ network.timezone }}
    volumes:
      - "{{ media_stack.appdata_dir }}/sonarr:/config"
      - "{{ media_stack.downloads_dir }}:/downloads"
      - "{{ media_stack.media_dir }}/tv:/tv"
    {% if media_stack.vpn.enabled | default(false) -%}
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    network_mode: service:gluetun
    {% else -%}
    ports:
      - "{{ media_stack.services.sonarr.port }}:8989"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.{{ media_stack.domain_name }}`)"
      - "traefik.http.routers.sonarr.entrypoints=web"
      - "traefik.http.services.sonarr.loadbalancer.server.port={{ media_stack.services.sonarr.port }}"
    {% endif -%}
    networks:
      servarrnetwork:
        ipv4_address: 172.39.0.3

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    environment:
      - PUID={{ user.uid }}
      - PGID={{ user.gid }}
      - TZ={{ network.timezone }}
    volumes:
      - "{{ media_stack.appdata_dir }}/radarr:/config"
      - "{{ media_stack.downloads_dir }}:/downloads"
      - "{{ media_stack.media_dir }}/movies:/movies"
    {% if media_stack.vpn.enabled | default(false) -%}
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    network_mode: service:gluetun
    {% else -%}
    ports:
      - "{{ media_stack.services.radarr.port }}:7878"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.{{ media_stack.domain_name }}`)"
      - "traefik.http.routers.radarr.entrypoints=web"
      - "traefik.http.services.radarr.loadbalancer.server.port={{ media_stack.services.radarr.port }}"
    {% endif -%}
    networks:
      servarrnetwork:
        ipv4_address: 172.39.0.4

  lidarr:
    container_name: lidarr
    image: lscr.io/linuxserver/lidarr:latest
    restart: unless-stopped
    volumes:
      - "{{ media_stack.appdata_dir }}/lidarr:/config"
      - "{{ media_stack.downloads_dir }}:/downloads"
      - "{{ media_stack.media_dir }}/music:/music"
    environment:
      - PUID={{ user.uid }}
      - PGID={{ user.gid }}
      - TZ={{ network.timezone }}
    {% if media_stack.vpn.enabled | default(false) -%}
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    network_mode: service:gluetun
    {% else -%}
    ports:
      - "{{ media_stack.services.lidarr.port }}:8686"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.{{ media_stack.domain_name }}`)"
      - "traefik.http.routers.lidarr.entrypoints=web"
      - "traefik.http.services.lidarr.loadbalancer.server.port={{ media_stack.services.lidarr.port }}"
    {% endif -%}
    networks:
      servarrnetwork:
        ipv4_address: 172.39.0.5

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    environment:
      - PUID={{ user.uid }}
      - PGID={{ user.gid }}
      - TZ={{ network.timezone }}
    volumes:
      - "{{ media_stack.appdata_dir }}/bazarr:/config"
      - "{{ media_stack.media_dir }}/movies:/movies"
      - "{{ media_stack.media_dir }}/tv:/tv"
    {% if media_stack.vpn.enabled | default(false) -%}
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    network_mode: service:gluetun
    {% else -%}
    ports:
      - "{{ media_stack.services.bazarr.port }}:6767"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bazarr.rule=Host(`bazarr.{{ media_stack.domain_name }}`)"
      - "traefik.http.routers.bazarr.entrypoints=web"
      - "traefik.http.services.bazarr.loadbalancer.server.port={{ media_stack.services.bazarr.port }}"
    {% endif -%}
    networks:
      servarrnetwork:
        ipv4_address: 172.39.0.6

# Newer additions to this stack feel. Remove the '#' to add the service.

  ytdl-sub:
    image: ghcr.io/jmbannon/ytdl-sub:latest
    container_name: ytdl-sub
    environment:
      - PUID={{ user.uid }}
      - PGID={{ user.gid }}
      - TZ={{ network.timezone }}
      - DOCKER_MODS=linuxserver/mods:universal-cron
    volumes:
      - ./ytdl-sub:/config
      # - /data/youtube:/youtube 
    networks:
      servarrnetwork:
        ipv4_address: 172.39.0.8
    restart: unless-stopped

  jellyseerr:
    container_name: jellyseerr
    image: fallenbagel/jellyseerr:latest
    environment:
      - PUID={{ user.uid }}
      - PGID={{ user.gid }}
      - TZ={{ network.timezone }}
    volumes:
      - "{{ media_stack.appdata_dir }}/jellyseerr:/app/config"
    {% if media_stack.vpn.enabled | default(false) -%}
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    network_mode: service:gluetun
    {% else -%}
    ports:
      - "{{ media_stack.services.jellyseerr.port }}:5055"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyseerr.rule=Host(`jellyseerr.{{ media_stack.domain_name }}`)"
      - "traefik.http.routers.jellyseerr.entrypoints=web"
      - "traefik.http.services.jellyseerr.loadbalancer.server.port={{ media_stack.services.jellyseerr.port }}"
    {% endif -%}
    networks:
      servarrnetwork:
        ipv4_address: 172.39.0.9
    restart: unless-stopped

# End of file.
