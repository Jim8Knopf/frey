---
# Enhanced version of roles/media_stack/tasks/main.yml

- name: Verify required variables are defined
  ansible.builtin.assert:
    that:
      - media_stack is defined
      - storage.base_dir is defined
      - user.name is defined
    msg: "Required media_stack variables are not properly defined"

- name: Create media stack directory
  ansible.builtin.file:
    path: "{{ storage.stacks_dir }}/media"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: '0755'

- name: Pre-pull critical images to avoid timeouts
  community.docker.docker_image:
    name: "{{ item }}"
    source: pull
    state: present
    timeout: 300
  loop:
    - "linuxserver/jellyfin:latest"
    - "linuxserver/sonarr:latest"
    - "linuxserver/radarr:latest"
    - "linuxserver/prowlarr:latest"
  register: image_pull_results
  retries: 2
  delay: 10
  failed_when: false

- name: Report failed image pulls
  ansible.builtin.debug:
    msg: "Warning: Failed to pull {{ item.item }}. Will retry during compose."
  loop: "{{ image_pull_results.results }}"
  when: 
    - item is failed
    - image_pull_results.results is defined
  loop_control:
    label: "{{ item.item }}"

- name: Deploy media stack compose file
  ansible.builtin.template:
    src: docker-compose-media.yml.j2
    dest: "{{ storage.stacks_dir }}/media/docker-compose.yml"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: '0644'
    backup: yes
  register: compose_template_result

- name: Show rendered compose
  ansible.builtin.shell: |
    nl -ba /opt/frey/stacks/media/docker-compose.yml
  register: compose_snippet
  changed_when: false

- debug:
    var: compose_snippet.stdout_lines

- name: Validate Docker Compose file syntax
  ansible.builtin.command:
    cmd: docker compose -f "{{ storage.stacks_dir }}/media/docker-compose.yml" config --quiet
  register: compose_validation
  failed_when: compose_validation.rc != 0
  changed_when: false

- name: Start media stack with graceful error handling
  block:
    - name: Start media stack containers using compose
      community.docker.docker_compose_v2:
        project_src: "{{ storage.stacks_dir }}/media"
        state: present
        remove_orphans: true
        timeout: 300
      register: compose_result
      retries: 2
      delay: 30

  rescue:
    - name: Handle compose failure - gather logs
      ansible.builtin.command:
        cmd: docker compose -f "{{ storage.stacks_dir }}/media/docker-compose.yml" logs --tail=50
      register: compose_logs
      failed_when: false

    - name: Display compose error details
      ansible.builtin.debug:
        msg: |
          Media stack deployment failed. Recent logs:
          {{ compose_logs.stdout }}
      when: compose_logs.stdout is defined

    - name: Fail with helpful message
      ansible.builtin.fail:
        msg: "Media stack deployment failed. Check the logs above and ensure all required directories exist."

- name: Wait for services to be ready
  ansible.builtin.uri:
    url: "http://localhost:{{ item.port }}"
    method: GET
    status_code: [200, 302, 401, 403]
    timeout: 10
  loop:
    - { service: "jellyfin", port: "{{ media_stack.services.jellyfin.port }}" }
    - { service: "sonarr", port: "{{ media_stack.services.sonarr.port }}" }
    - { service: "radarr", port: "{{ media_stack.services.radarr.port }}" }
    - { service: "prowlarr", port: "{{ media_stack.services.prowlarr.port }}" }
  register: service_health_check
  retries: 6
  delay: 10
  failed_when: false

- name: Report service health status
  ansible.builtin.debug:
    msg: |
      Service Health Status:
      {% for result in service_health_check.results %}
      - {{ result.item.service }}: {{ 'HEALTHY' if result is succeeded else 'NOT READY' }}
      {% endfor %}
  when: service_health_check.results is defined
