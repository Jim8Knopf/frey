# Enhanced Raspberry Pi 5 Off-Grid Media & AI Hub with Dockge & Monitoring
# Main language: English, German content support included

# group_vars/all.yml - Enhanced configuration
# Global configuration variables

# User Configuration
media_user: media
media_uid: 1000
media_gid: 1000

# Storage Paths
base_dir: /opt
media_dir: "{{ base_dir }}/media"
appdata_dir: "{{ base_dir }}/appdata"
downloads_dir: "{{ base_dir }}/downloads"
photos_dir: "{{ base_dir }}/photos"
ai_dir: "{{ base_dir }}/ai"
backups_dir: "{{ base_dir }}/backups"
logs_dir: "{{ base_dir }}/logs"
stacks_dir: "{{ base_dir }}/stacks"  # For Dockge

# Network Configuration
domain_name: pi5hub.local
timezone: Australia/Melbourne

# Media Stack Configuration
jellyfin_port: 8096
sonarr_port: 8989
radarr_port: 7878
readarr_port: 8787
qbittorrent_port: 8080
prowlarr_port: 9696
audiobookshelf_port: 13378
bazarr_port: 6767  # Subtitle management

# AI Stack Configuration
ollama_port: 11434
openwebui_port: 3000

# Home Assistant Configuration
homeassistant_port: 8123

# Photo Management
immich_port: 2283

# Infrastructure & Management
traefik_port: 80
traefik_dashboard_port: 8081
portainer_port: 9000
dockge_port: 5001
watchtower_interval: 86400  # 24 hours

# Monitoring & Logging
grafana_port: 3001
prometheus_port: 9090
node_exporter_port: 9100
cadvisor_port: 8082
loki_port: 3100
promtail_port: 9080
uptime_kuma_port: 3002

# File Management
filebrowser_port: 8083
code_server_port: 8084

# Network Tools
speedtest_port: 8085
adguardhome_port: 3053

# German Content Support
german_locale: de_DE.UTF-8
enable_german_indexers: true

# SSD Optimization
enable_ssd_optimization: true
enable_trim: true

# Power Management (12V setup)
enable_power_monitoring: true
low_power_threshold: 11.8  # Volts
critical_power_threshold: 11.0  # Volts
enable_graceful_shutdown: true

# Security
enable_fail2ban: true
enable_ufw: true
ssh_port: 22

---
# playbooks/site.yml - Enhanced main playbook
- name: Deploy Enhanced Raspberry Pi 5 Off-Grid Media & AI Hub
  hosts: all
  become: yes
  vars_files:
    - ../group_vars/all.yml
  
  pre_tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
  
  roles:
    - common
    - security
    - ssd_optimization
    - docker
    - directories
    - networking
    - monitoring
    - dockge
    - media_stack
    - ai_stack
    - photo_management
    - homeassistant
    - infrastructure
    - file_management
    - backup
    - power_management

  post_tasks:
    - name: Display service URLs
      debug:
        msg: |
          üéØ Core Services:
          Jellyfin (Media): http://{{ ansible_host }}:{{ jellyfin_port }}
          Sonarr (TV): http://{{ ansible_host }}:{{ sonarr_port }}
          Radarr (Movies): http://{{ ansible_host }}:{{ radarr_port }}
          Readarr (Books): http://{{ ansible_host }}:{{ readarr_port }}
          Bazarr (Subtitles): http://{{ ansible_host }}:{{ bazarr_port }}
          AudioBookshelf: http://{{ ansible_host }}:{{ audiobookshelf_port }}
          qBittorrent: http://{{ ansible_host }}:{{ qbittorrent_port }}
          Prowlarr (Indexers): http://{{ ansible_host }}:{{ prowlarr_port }}
          
          ü§ñ AI Services:
          Ollama API: http://{{ ansible_host }}:{{ ollama_port }}
          Open WebUI: http://{{ ansible_host }}:{{ openwebui_port }}
          
          üì∑ Photos & Home:
          Immich (Photos): http://{{ ansible_host }}:{{ immich_port }}
          Home Assistant: http://{{ ansible_host }}:{{ homeassistant_port }}
          
          üõ†Ô∏è Management:
          Dockge (Docker UI): http://{{ ansible_host }}:{{ dockge_port }}
          Portainer: http://{{ ansible_host }}:{{ portainer_port }}
          FileBrowser: http://{{ ansible_host }}:{{ filebrowser_port }}
          Code Server: http://{{ ansible_host }}:{{ code_server_port }}
          
          üìä Monitoring:
          Grafana: http://{{ ansible_host }}:{{ grafana_port }}
          Prometheus: http://{{ ansible_host }}:{{ prometheus_port }}
          Uptime Kuma: http://{{ ansible_host }}:{{ uptime_kuma_port }}
          
          üåê Network:
          AdGuard Home: http://{{ ansible_host }}:{{ adguardhome_port }}
          Speedtest: http://{{ ansible_host }}:{{ speedtest_port }}
          Traefik Dashboard: http://{{ ansible_host }}:{{ traefik_dashboard_port }}

---
# roles/ssd_optimization/tasks/main.yml
- name: Enable TRIM for SSD longevity
  systemd:
    name: fstrim.timer
    enabled: yes
    state: started
  when: enable_trim

- name: Configure SSD-friendly mount options
  replace:
    path: /etc/fstab
    regexp: '^(UUID=\S+\s+/\s+ext4\s+)defaults(\s+.*)$'
    replace: '\1defaults,noatime,discard\2'
  notify: remount_root
  when: enable_ssd_optimization

- name: Reduce swappiness for SSD
  sysctl:
    name: vm.swappiness
    value: '10'
    state: present
    reload: yes

- name: Configure log rotation for SSD
  lineinfile:
    path: /etc/logrotate.conf
    regexp: '^rotate'
    line: 'rotate 4'

- name: Disable unnecessary logging to reduce SSD writes
  systemd:
    name: rsyslog
    enabled: no
    state: stopped
  when: enable_ssd_optimization

handlers:
  - name: remount_root
    command: mount -o remount /

---
# roles/security/tasks/main.yml
- name: Install security packages
  apt:
    name:
      - fail2ban
      - ufw
      - unattended-upgrades
      - logwatch
    state: present

- name: Configure UFW default policies
  ufw:
    direction: "{{ item.direction }}"
    policy: "{{ item.policy }}"
  loop:
    - { direction: 'incoming', policy: 'deny' }
    - { direction: 'outgoing', policy: 'allow' }
  when: enable_ufw

- name: Configure UFW rules for services
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - "{{ ssh_port }}"
    - "{{ jellyfin_port }}"
    - "{{ grafana_port }}"
    - "{{ dockge_port }}"
    - "{{ homeassistant_port }}"
    - "{{ immich_port }}"
    - "{{ openwebui_port }}"
  when: enable_ufw

- name: Enable UFW
  ufw:
    state: enabled
  when: enable_ufw

- name: Configure Fail2Ban
  template:
    src: jail.local.j2
    dest: /etc/fail2ban/jail.local
  notify: restart fail2ban
  when: enable_fail2ban

- name: Enable automatic security updates
  lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^//.*"${distro_id}:${distro_codename}-security";'
    line: '        "${distro_id}:${distro_codename}-security";'

handlers:
  - name: restart fail2ban
    systemd:
      name: fail2ban
      state: restarted

---
# roles/security/templates/jail.local.j2
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 5
backend = systemd

[sshd]
enabled = true
port = {{ ssh_port }}

---
# roles/dockge/tasks/main.yml
- name: Create Dockge directory
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ media_user }}"
    group: "{{ media_user }}"
    mode: '0755'
  loop:
    - "{{ appdata_dir }}/dockge"
    - "{{ stacks_dir }}"

- name: Deploy Dockge docker-compose
  template:
    src: docker-compose-dockge.yml.j2
    dest: "{{ base_dir }}/docker-compose-dockge.yml"
    owner: "{{ media_user }}"
    group: "{{ media_user }}"
    mode: '0644'

- name: Start Dockge container
  docker_compose:
    project_src: "{{ base_dir }}"
    files:
      - docker-compose-dockge.yml
    state: present

---
# roles/dockge/templates/docker-compose-dockge.yml.j2
version: '3.8'

services:
  dockge:
    image: louislam/dockge:1
    container_name: dockge
    restart: unless-stopped
    ports:
      - "{{ dockge_port }}:5001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "{{ appdata_dir }}/dockge:/app/data"
      - "{{ stacks_dir }}:/opt/stacks"
    environment:
      - DOCKGE_STACKS_DIR=/opt/stacks

networks:
  default:
    name: management_network

---
# roles/monitoring/tasks/main.yml
- name: Create monitoring directories
  file:
    path: "{{ appdata_dir }}/{{ item }}"
    state: directory
    owner: "{{ media_user }}"
    group: "{{ media_user }}"
    mode: '0755'
  loop:
    - prometheus
    - grafana
    - loki
    - promtail
    - uptime-kuma

- name: Deploy monitoring stack
  template:
    src: docker-compose-monitoring.yml.j2
    dest: "{{ base_dir }}/docker-compose-monitoring.yml"
    owner: "{{ media_user }}"
    group: "{{ media_user }}"
    mode: '0644'

- name: Create Prometheus configuration
  template:
    src: prometheus.yml.j2
    dest: "{{ appdata_dir }}/prometheus/prometheus.yml"
    owner: "{{ media_user }}"
    group: "{{ media_user }}"
    mode: '0644'

- name: Create Grafana provisioning directory
  file:
    path: "{{ appdata_dir }}/grafana/provisioning/{{ item }}"
    state: directory
    owner: "{{ media_user }}"
    group: "{{ media_user }}"
    mode: '0755'
  loop:
    - dashboards
    - datasources

- name: Configure Grafana datasources
  template:
    src: grafana-datasources.yml.j2
    dest: "{{ appdata_dir }}/grafana/provisioning/datasources/datasources.yml"
    owner: "{{ media_user }}"
    group: "{{ media_user }}"
    mode: '0644'

- name: Start monitoring stack
  docker_compose:
    project_src: "{{ base_dir }}"
    files:
      - docker-compose-monitoring.yml
    state: present

---
# roles/monitoring/templates/docker-compose-monitoring.yml.j2
version: '3.8'

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "{{ prometheus_port }}:9090"
    volumes:
      - "{{ appdata_dir }}/prometheus:/etc/prometheus"
      - "{{ appdata_dir }}/prometheus/data:/prometheus"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "{{ node_exporter_port }}:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "{{ cadvisor_port }}:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    privileged: true

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "{{ grafana_port }}:3000"
    volumes:
      - "{{ appdata_dir }}/grafana:/var/lib/grafana"
      - "{{ appdata_dir }}/grafana/provisioning:/etc/grafana/provisioning"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123  # Change this!
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel

  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    ports:
      - "{{ loki_port }}:3100"
    volumes:
      - "{{ appdata_dir }}/loki:/loki"
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    volumes:
      - "{{ logs_dir }}:/var/log:ro"
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - "{{ appdata_dir }}/promtail:/etc/promtail"
    command: -config.file=/etc/promtail/config.yml

  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    restart: unless-stopped
    ports:
      - "{{ uptime_kuma_port }}:3001"
    volumes:
      - "{{ appdata_dir }}/uptime-kuma:/app/data"
      - /var/run/docker.sock:/var/run/docker.sock:ro

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL={{ watchtower_interval }}
      - WATCHTOWER_INCLUDE_RESTARTING=true
    command: --schedule "0 0 2 * * *"  # 2 AM daily

networks:
  default:
    name: monitoring_network

---
# roles/monitoring/templates/prometheus.yml.j2
global:
  scrape_interval: 30s
  evaluation_interval: 30s

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']

  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']

  - job_name: 'docker-containers'
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s

---
# roles/monitoring/templates/grafana-datasources.yml.j2
apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true

  - name: Loki
    type: loki
    access: proxy
    url: http://loki:3100

---
# roles/file_management/tasks/main.yml
- name: Deploy file management tools
  template:
    src: docker-compose-filetools.yml.j2
    dest: "{{ base_dir }}/docker-compose-filetools.yml"
    owner: "{{ media_user }}"
    group: "{{ media_user }}"
    mode: '0644'

- name: Start file management containers
  docker_compose:
    project_src: "{{ base_dir }}"
    files:
      - docker-compose-filetools.yml
    state: present

---
# roles/file_management/templates/docker-compose-filetools.yml.j2
version: '3.8'

services:
  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: filebrowser
    restart: unless-stopped
    ports:
      - "{{ filebrowser_port }}:80"
    volumes:
      - "{{ base_dir }}:/srv"
      - "{{ appdata_dir }}/filebrowser/database:/database"
      - "{{ appdata_dir }}/filebrowser/config:/config"
    environment:
      - FB_DATABASE=/database/filebrowser.db
      - FB_CONFIG_FILE=/config/settings.json

  code-server:
    image: codercom/code-server:latest
    container_name: code-server
    restart: unless-stopped
    ports:
      - "{{ code_server_port }}:8080"
    volumes:
      - "{{ base_dir }}:/home/coder/project"
      - "{{ appdata_dir }}/code-server:/home/coder/.local/share/code-server"
    environment:
      - PASSWORD=codeserver123  # Change this!
      - SUDO_PASSWORD=codeserver123

networks:
  default:
    name: filetools_network

---
# roles/networking/tasks/main.yml
- name: Deploy network tools
  template:
    src: docker-compose-network.yml.j2
    dest: "{{ base_dir }}/docker-compose-network.yml"
    owner: "{{ media_user }}"
    group: "{{ media_user }}"
    mode: '0644'

- name: Start network tools
  docker_compose:
    project_src: "{{ base_dir }}"
    files:
      - docker-compose-network.yml
    state: present

---
# roles/networking/templates/docker-compose-network.yml.j2
version: '3.8'

services:
  speedtest:
    image: openspeedtest/latest:latest
    container_name: speedtest
    restart: unless-stopped
    ports:
      - "{{ speedtest_port }}:3000"

  adguardhome:
    image: adguard/adguardhome:latest
    container_name: adguardhome
    restart: unless-stopped
    ports:
      - "{{ adguardhome_port }}:3000"
      - "53:53/tcp"
      - "53:53/udp"
    volumes:
      - "{{ appdata_dir }}/adguardhome/work:/opt/adguardhome/work"
      - "{{ appdata_dir }}/adguardhome/conf:/opt/adguardhome/conf"

networks:
  default:
    name: network_tools

---
# roles/power_management/tasks/main.yml
- name: Install power management tools
  apt:
    name:
      - python3-gpio
      - python3-smbus
    state: present

- name: Create power monitoring script
  template:
    src: power_monitor.py.j2
    dest: /usr/local/bin/power_monitor.py
    mode: '0755'
  when: enable_power_monitoring

- name: Create power monitoring service
  template:
    src: power-monitor.service.j2
    dest: /etc/systemd/system/power-monitor.service
    mode: '0644'
  when: enable_power_monitoring
  notify: 
    - reload systemd
    - start power monitor

handlers:
  - name: reload systemd
    systemd:
      daemon_reload: yes

  - name: start power monitor
    systemd:
      name: power-monitor
      state: started
      enabled: yes

---
# roles/power_management/templates/power_monitor.py.j2
#!/usr/bin/env python3
import time
import subprocess
import logging
import sys

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

LOW_VOLTAGE_THRESHOLD = {{ low_power_threshold }}
CRITICAL_VOLTAGE_THRESHOLD = {{ critical_power_threshold }}

def get_system_voltage():
    """Get system voltage from vcgencmd"""
    try:
        result = subprocess.run(['vcgencmd', 'measure_volts', 'core'], 
                              capture_output=True, text=True)
        voltage_str = result.stdout.strip()
        # Extract voltage value from "volt=1.2000V" format
        voltage = float(voltage_str.split('=')[1].rstrip('V'))
        return voltage
    except Exception as e:
        logger.error(f"Error reading voltage: {e}")
        return None

def graceful_shutdown():
    """Perform graceful shutdown of services"""
    logger.warning("Initiating graceful shutdown...")
    
    # Stop Docker containers gracefully
    subprocess.run(['docker', 'stop', '-t', '30', '$(docker ps -q)'], shell=True)
    
    # Sync filesystem
    subprocess.run(['sync'])
    
    # Shutdown system
    subprocess.run(['sudo', 'shutdown', '-h', 'now'])

def main():
    logger.info("Power monitoring started")
    
    while True:
        voltage = get_system_voltage()
        
        if voltage is not None:
            logger.info(f"System voltage: {voltage}V")
            
            if voltage < CRITICAL_VOLTAGE_THRESHOLD:
                logger.critical(f"CRITICAL: Voltage {voltage}V below {CRITICAL_VOLTAGE_THRESHOLD}V")
                graceful_shutdown()
                
            elif voltage < LOW_VOLTAGE_THRESHOLD:
                logger.warning(f"WARNING: Low voltage detected: {voltage}V")
        
        time.sleep(60)  # Check every minute

if __name__ == "__main__":
    main()

---
# roles/power_management/templates/power-monitor.service.j2
[Unit]
Description=Power Monitoring Service
After=network.target

[Service]
Type=simple
User=root
ExecStart=/usr/bin/python3 /usr/local/bin/power_monitor.py
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target

---
# Enhanced media stack with Bazarr
# roles/media_stack/templates/docker-compose-media.yml.j2
version: '3.8'

services:
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    user: "{{ media_uid }}:{{ media_gid }}"
    restart: unless-stopped
    ports:
      - "{{ jellyfin_port }}:8096"
    volumes:
      - "{{ appdata_dir }}/jellyfin:/config"
      - "{{ media_dir }}:/media"
      - /opt/vc/lib:/opt/vc/lib
    environment:
      - JELLYFIN_PublishedServerUrl=http://{{ ansible_host }}:{{ jellyfin_port }}
    devices:
      - /dev/vcsm-cma:/dev/vcsm-cma
      - /dev/vchiq:/dev/vchiq
    group_add:
      - "video"

  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    ports:
      - "{{ sonarr_port }}:8989"
    volumes:
      - "{{ appdata_dir }}/sonarr:/config"
      - "{{ media_dir }}/tv:/tv"
      - "{{ downloads_dir }}:/downloads"
    environment:
      - PUID={{ media_uid }}
      - PGID={{ media_gid }}
      - TZ={{ timezone }}

  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    ports:
      - "{{ radarr_port }}:7878"
    volumes:
      - "{{ appdata_dir }}/radarr:/config"
      - "{{ media_dir }}/movies:/movies"
      - "{{ downloads_dir }}:/downloads"
    environment:
      - PUID={{ media_uid }}
      - PGID={{ media_gid }}
      - TZ={{ timezone }}

  readarr:
    image: linuxserver/readarr:develop
    container_name: readarr
    restart: unless-stopped
    ports:
      - "{{ readarr_port }}:8787"
    volumes:
      - "{{ appdata_dir }}/readarr:/config"
      - "{{ media_dir }}/audiobooks:/audiobooks"
      - "{{ downloads_dir }}:/downloads"
    environment:
      - PUID={{ media_uid }}
      - PGID={{ media_gid }}
      - TZ={{ timezone }}

  bazarr:
    image: linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    ports:
      - "{{ bazarr_port }}:6767"
    volumes:
      - "{{ appdata_dir }}/bazarr:/config"
      - "{{ media_dir }}/movies:/movies"
      - "{{ media_dir }}/tv:/tv"
    environment:
      - PUID={{ media_uid }}
      - PGID={{ media_gid }}
      - TZ={{ timezone }}

  audiobookshelf:
    image: ghcr.io/advplyr/audiobookshelf:latest
    container_name: audiobookshelf
    restart: unless-stopped
    ports:
      - "{{ audiobookshelf_port }}:80"
    volumes:
      - "{{ appdata_dir }}/audiobookshelf:/config"
      - "{{ media_dir }}/audiobooks:/audiobooks"
      - "{{ media_dir }}/music:/music"
    environment:
      - AUDIOBOOKSHELF_UID={{ media_uid }}
      - AUDIOBOOKSHELF_GID={{ media_gid }}

  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    ports:
      - "{{ qbittorrent_port }}:8080"
      - "6881:6881"
      - "6881:6881/udp"
    volumes:
      - "{{ appdata_dir }}/qbittorrent:/config"
      - "{{ downloads_dir }}:/downloads"
    environment:
      - PUID={{ media_uid }}
      - PGID={{ media_gid }}
      - TZ={{ timezone }}
      - WEBUI_PORT={{ qbittorrent_port }}

  prowlarr:
    image: linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    ports:
      - "{{ prowlarr_port }}:9696"
    volumes:
      - "{{ appdata_dir }}/prowlarr:/config"
    environment:
      - PUID={{ media_uid }}
      - PGID={{ media_gid }}
      - TZ={{ timezone }}

networks:
  default:
    name: media_network

---
# Quick deployment script: deploy.sh
#!/bin/bash
# Enhanced Pi 5 Hub deployment script

echo "üöÄ Starting Enhanced Pi 5 Off-Grid Hub deployment..."

# Check if running on Pi 5
if ! grep -q "Raspberry Pi 5" /proc/device-tree/model 2>/dev/null; then
    echo "‚ö†Ô∏è  Warning: This script is optimized for Raspberry Pi 5"
fi

# Update system
echo "üì¶ Updating system packages..."
sudo apt update && sudo apt upgrade -y

# Install Ansible if not present
if ! command -v ansible &> /dev/null; then
    echo "üîß Installing Ansible..."
    sudo apt install -y ansible
fi

# Check available storage
AVAILABLE_GB=$(df -BG / | awk 'NR==2{gsub(/G/,"",$4); print $4}')
if [ "$AVAILABLE_GB" -lt 50 ]; then
    echo "‚ö†Ô∏è  Warning: Less than 50GB available. Consider expanding storage."
fi

# Run the playbook
echo "üéØ Running Ansible playbook..."
ansible-playbook -i inventory/hosts.yml playbooks/site.yml --ask-become-pass

echo "‚úÖ Deployment completed!"
echo ""
echo "üåü Your Pi 5 Hub is ready! Services available at:"
echo ""
echo "üì∫ MEDIA SERVICES:"
echo "   Jellyfin:        http://$(hostname -I | cut -d' ' -f1):8096"
echo "   Sonarr:          http://$(hostname -I | cut -d' ' -f1):8989"
echo "   Radarr:          http://$(hostname -I | cut -d' ' -f1):7878"
echo "   Readarr:         http://$(hostname -I | cut -d' ' -f1):8787"
echo "   Bazarr:          http://$(hostname -I | cut -d' ' -f1):6767"
echo "   AudioBookshelf:  http://$(hostname -I | cut -d' ' -f1):13378"
echo "   qBittorrent:     http://$(hostname -I | cut -d' ' -f1):8080"
echo "   Prowlarr:        http://$(hostname -I | cut -d' ' -f1):9696"
echo ""
echo "ü§ñ AI SERVICES:"
echo "   Ollama API:      http://$(hostname -I | cut -d' ' -f1):11434"
echo "   Open WebUI:      http://$(hostname -I | cut -d' ' -f1):3000"
echo ""
echo "üì∑ PHOTOS & HOME:"
echo "   Immich:          http://$(hostname -I | cut -d' ' -f1):2283"
echo "   Home Assistant:  http://$(hostname -I | cut -d' ' -f1):8123"
echo ""
echo "üõ†Ô∏è  MANAGEMENT:"
echo "   Dockge:          http://$(hostname -I | cut -d' ' -f1):5001"
echo "   Portainer:       http://$(hostname -I | cut -d' ' -f1):9000"
echo "   FileBrowser:     http://$(hostname -I | cut -d' ' -f1):8083"
echo "   Code Server:     http://$(hostname -I | cut -d' ' -f1):8084"
echo ""
echo "üìä MONITORING:"
echo "   Grafana:         http://$(hostname -I | cut -d' ' -f1):3001"
echo "   Prometheus:      http://$(hostname -I | cut -d' ' -f1):9090"
echo "   Uptime Kuma:     http://$(hostname -I | cut -d' ' -f1):3002"
echo ""
echo "üåê NETWORK:"
echo "   AdGuard Home:    http://$(hostname -I | cut -d' ' -f1):3053"
echo "   SpeedTest:       http://$(hostname -I | cut -d' ' -f1):8085"
echo "   Traefik:         http://$(hostname -I | cut -d' ' -f1):8081"
echo ""
echo "üîë DEFAULT CREDENTIALS:"
echo "   qBittorrent:     admin / adminadmin"
echo "   Grafana:         admin / admin123"
echo "   Code Server:     Password: codeserver123"
echo ""
echo "‚ö° IMPORTANT NOTES:"
echo "   ‚Ä¢ Change all default passwords immediately!"
echo "   ‚Ä¢ Configure AdGuard Home for network-wide ad blocking"
echo "   ‚Ä¢ Set up Grafana dashboards for monitoring"
echo "   ‚Ä¢ Use Dockge for easy container management"
echo "   ‚Ä¢ Enable HTTPS with your domain in Traefik"
echo ""
echo "üìñ Access the management interfaces to complete setup!"

---
# System maintenance script: maintenance.sh
#!/bin/bash
# Pi 5 Hub Maintenance Script

echo "üßπ Running Pi 5 Hub Maintenance..."

# Update containers
echo "üì¶ Updating containers..."
cd /opt
for compose_file in docker-compose-*.yml; do
    if [ -f "$compose_file" ]; then
        echo "Updating $compose_file..."
        docker-compose -f "$compose_file" pull
        docker-compose -f "$compose_file" up -d
    fi
done

# Clean up unused images
echo "üóëÔ∏è  Cleaning up unused Docker images..."
docker image prune -f

# Check disk usage
echo "üíæ Disk usage:"
df -h /

# Check memory usage
echo "üß† Memory usage:"
free -h

# Check temperature
echo "üå°Ô∏è  System temperature:"
vcgencmd measure_temp

# Check for system updates
echo "üîÑ Checking for system updates..."
apt list --upgradable

# Log rotation
echo "üìú Rotating logs..."
logrotate -f /etc/logrotate.conf

# SSD health check (if available)
if command -v smartctl &> /dev/null; then
    echo "üíø SSD health check:"
    smartctl -H /dev/sda || echo "SMART not available"
fi

echo "‚úÖ Maintenance completed!"

---
# Performance tuning script: optimize.sh
#!/bin/bash
# Pi 5 Performance Optimization Script

echo "‚ö° Optimizing Pi 5 for SSD and performance..."

# GPU Memory Split (less for headless)
echo "üéÆ Setting GPU memory split..."
sudo raspi-config nonint do_memory_split 64

# Enable I2C and SPI if needed
echo "üîß Enabling hardware interfaces..."
sudo raspi-config nonint do_i2c 0
sudo raspi-config nonint do_spi 0

# Optimize /boot/config.txt for Pi 5
echo "‚öôÔ∏è  Optimizing boot configuration..."
cat << 'EOF' | sudo tee -a /boot/config.txt

# Pi 5 Optimization
# Increase USB current
max_usb_current=1

# Optimize for SSD
dtoverlay=pcie-32bit-dma

# Network optimization
dtparam=eth_max_speed=1000

# Temperature monitoring
dtparam=temp_limit=80

# I/O optimization
dtparam=i2c_arm_baudrate=1000000
EOF

# Kernel parameters for performance
echo "üöÄ Optimizing kernel parameters..."
cat << 'EOF' | sudo tee -a /etc/sysctl.d/99-pi5-optimization.conf
# Network optimizations
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 16384 16777216

# File system optimizations
vm.dirty_ratio = 15
vm.dirty_background_ratio = 5
vm.vfs_cache_pressure = 50

# SSD optimizations
vm.swappiness = 10
EOF

# Docker daemon optimization
echo "üê≥ Optimizing Docker daemon..."
sudo mkdir -p /etc/docker
cat << 'EOF' | sudo tee /etc/docker/daemon.json
{
  "log-driver": "local",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ],
  "default-ulimits": {
    "nofile": {
      "Name": "nofile",
      "Hard": 64000,
      "Soft": 64000
    }
  }
}
EOF

echo "‚úÖ Optimization completed! Reboot recommended."

---
# Health check script: health_check.sh
#!/bin/bash
# Pi 5 Hub Health Check Script

echo "üè• Pi 5 Hub Health Check"
echo "========================"

# System info
echo "üìä SYSTEM INFO:"
echo "Uptime: $(uptime -p)"
echo "Load: $(uptime | awk '{print $10,$11,$12}')"
echo "Temperature: $(vcgencmd measure_temp)"
echo "Voltage: $(vcgencmd measure_volts core)"
echo "Memory: $(free -h | grep Mem | awk '{print $3"/"$2}')"
echo ""

# Disk usage
echo "üíæ DISK USAGE:"
df -h | grep -E "(Filesystem|/dev/)"
echo ""

# Docker status
echo "üê≥ CONTAINER STATUS:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | head -20
echo ""

# Service connectivity
echo "üåê SERVICE HEALTH:"
services=(
    "8096:Jellyfin"
    "8989:Sonarr" 
    "7878:Radarr"
    "5001:Dockge"
    "3001:Grafana"
    "9090:Prometheus"
)

for service in "${services[@]}"; do
    port=$(echo $service | cut -d':' -f1)
    name=$(echo $service | cut -d':' -f2)
    if curl -s --connect-timeout 5 http://localhost:$port > /dev/null; then
        echo "‚úÖ $name ($port) - OK"
    else
        echo "‚ùå $name ($port) - DOWN"
    fi
done

echo ""

# Log errors in the last hour
echo "üö® RECENT ERRORS:"
journalctl --since="1 hour ago" --priority=err --no-pager -q
echo ""

# Top processes
echo "üîù TOP PROCESSES:"
ps aux --sort=-%cpu | head -10

echo ""
echo "üìã Health check completed!"

---
# Environment variables file: .env
# Pi 5 Hub Environment Configuration

# Change these default values!
GRAFANA_PASSWORD=admin123
QBITTORRENT_PASSWORD=adminadmin
CODE_SERVER_PASSWORD=codeserver123
WEBUI_SECRET_KEY=your-secret-key-change-this

# Database passwords
POSTGRES_PASSWORD=secure_postgres_password
MYSQL_ROOT_PASSWORD=secure_mysql_password

# API Keys (add your own)
TMDB_API_KEY=your_tmdb_api_key_here
TVDB_API_KEY=your_tvdb_api_key_here

# Notification settings
DISCORD_WEBHOOK=
TELEGRAM_BOT_TOKEN=
TELEGRAM_CHAT_ID=

# Backup settings
BACKUP_RETENTION_DAYS=7
ENABLE_CLOUD_BACKUP=false
CLOUD_BACKUP_PATH=

# Network settings
DOMAIN_NAME=pi5hub.local
ENABLE_HTTPS=false
CERT_EMAIL=your@email.com

---
# README.md for the project
# üöÄ Enhanced Raspberry Pi 5 Off-Grid Media & AI Hub

A comprehensive Ansible-based setup for transforming your Raspberry Pi 5 into a powerful off-grid media server and AI hub with monitoring, management, and optimization features.

## ‚ú® Features

### üì∫ Media Stack
- **Jellyfin** - Media server with hardware acceleration
- **Sonarr/Radarr/Readarr** - Automated media management
- **Bazarr** - Subtitle management
- **AudioBookshelf** - Audiobook and podcast server
- **qBittorrent** - Torrent client
- **Prowlarr** - Indexer management

### ü§ñ AI Services
- **Ollama** - Local LLM server
- **Open WebUI** - ChatGPT-like interface

### üì∑ Photo & Smart Home
- **Immich** - Google Photos alternative
- **Home Assistant** - Smart home hub
- **Node-RED** - Automation flows

### üõ†Ô∏è Management & Monitoring
- **Dockge** - Docker Compose management UI
- **Grafana + Prometheus** - Monitoring dashboards
- **Uptime Kuma** - Service monitoring
- **Portainer** - Container management
- **FileBrowser** - Web file manager
- **Code Server** - Web-based VS Code

### üåê Network Tools
- **Traefik** - Reverse proxy
- **AdGuard Home** - DNS filtering
- **SpeedTest** - Network speed testing

### ‚ö° Optimizations
- SSD optimization (TRIM, reduced writes)
- Pi 5 hardware acceleration
- Power monitoring and graceful shutdown
- Security hardening (UFW, Fail2Ban)
- Automated updates with Watchtower

## üîß Requirements

- Raspberry Pi 5 (4GB+ recommended)
- SSD or high-quality SD card (64GB+ recommended)
- Stable power supply (official Pi 5 adapter recommended)
- Network connection

## üöÄ Quick Start

1. **Prepare your Pi:**
   ```bash
   # Update system
   sudo apt update && sudo apt upgrade -y
   
   # Install git
   sudo apt install -y git
   ```

2. **Clone and deploy:**
   ```bash
   git clone <this-repo>
   cd pi5-hub-ansible
   chmod +x deploy.sh
   ./deploy.sh
   ```

3. **Access services:**
   - Check the output for all service URLs
   - Default credentials are shown (change immediately!)

## üìã Post-Installation

### üîë Security First
1. Change all default passwords
2. Configure UFW rules for your network
3. Set up SSH key authentication
4. Enable HTTPS with your domain

### üìä Monitoring Setup
1. Access Grafana and import dashboards
2. Configure Uptime Kuma for service monitoring
3. Set up alerts for system health

### üé¨ Media Configuration
1. Configure indexers in Prowlarr
2. Add your media libraries to Sonarr/Radarr
3. Set up quality profiles and download clients
4. Import existing media to Jellyfin

## üîß Management

### Using Dockge
- Best UI for managing Docker Compose stacks
- Easy updates and configuration changes
- Real-time logs and resource monitoring

### Maintenance Scripts
```bash
# System maintenance
sudo /opt/maintenance.sh

# Health check
sudo /opt/health_check.sh

# Performance optimization
sudo /opt/optimize.sh
```

## üìà Resource Usage

Typical resource usage on Pi 5 (4GB):
- **Idle**: ~1GB RAM, 5% CPU
- **Active media streaming**: ~2GB RAM, 15-30% CPU
- **AI inference**: ~2-3GB RAM, 60-90% CPU

## ‚ö° Power Consumption

- **Idle**: ~8-10W
- **Active**: ~12-15W
- **Peak**: ~20-25W

Perfect for 12V systems with battery backup.

## üÜò Troubleshooting

### Container Issues
```bash
# Check logs
docker logs container_name

# Restart service
cd /opt && docker-compose -f docker-compose-media.yml restart service_name
```

### Storage Issues
```bash
# Check disk usage
df -h

# Clean Docker
docker system prune -a
```

### Performance Issues
```bash
# Check system resources
htop

# Monitor temperatures
watch vcgencmd measure_temp
```

## ü§ù Contributing

Feel free to:
- Report issues
- Suggest improvements
- Add new services
- Optimize configurations

## üìÑ License

MIT License - feel free to modify and distribute.

---

**Happy self-hosting! üè†‚ú®**