---
- name: Deploy Enhanced Raspberry Pi 5 Off-Grid Media & AI Hub
  hosts: all
  become: yes

  vars_files:
    - ../group_vars/all/main.yml
    - ../group_vars/all/secrets.yml

  pre_tasks:
    - name: Find apt source files
      find:
        paths: /etc/apt/sources.list.d
        patterns: '*.list'
        file_type: file
      register: apt_source_files
      ignore_errors: true

    - name: Check which apt source files reference download.docker.com
      shell: "grep -l 'download.docker.com' {{ item.path }} || true"
      loop: "{{ apt_source_files.files | default([]) }}"
      register: docker_source_matches
      changed_when: false
      failed_when: false

    - name: Remove Docker apt source files that reference download.docker.com
      file:
        path: "{{ item }}"
        state: absent
      loop: "{{ docker_source_matches.results | map(attribute='stdout') | reject('equalto','') | list }}"
      when: docker_source_matches is defined and docker_source_matches.results | length > 0
      become: true

    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      tags: always

    - name: Display deployment info
      ansible.builtin.debug:
        msg: |
          üöÄ Starting Pi 5 Hub deployment
          Target: {{ ansible_host }}
          User: {{ ansible_user_id }}
          Services: {% if features.media_stack %}Media, {% endif %}{% if features.ai_stack %}AI, {% endif %}{% if features.monitoring %}Monitoring, {% endif %}{% if features.photo_management %}Photos{% endif %}

  roles:
    # Core Infrastructure
    - role: security
      tags: [security]
      when: security.ufw.enable or security.fail2ban.enable

    # - role: ssd_optimization
    #   tags: [ssd, optimization]
    #   when: optimization.ssd.enable

    - role: docker_minimal
      tags: [docker, base]

    - role: directories
      tags: [directories, base]

    # Network and Management
    - role: wifi_access_point
      tags: [wifi, networking]
      when: features.wifi_access_point

    - role: infrastructure
      tags: [infrastructure, management]
      when: features.infrastructure

    - role: dockge
      tags: [dockge, management]

    # Services
    - role: monitoring
      tags: [monitoring]
      when: features.monitoring

    - role: media_stack
      tags: [media]
      when: features.media_stack

    # - role: ai_stack
    #   tags: [ai]
    #   when: features.ai_stack

    # - role: photo_management
    #   tags: [photos]
    #   when: features.photo_management

    # - role: file_management
    #   tags: [files]
    #   when: features.file_management

    # - role: cookbook
    #   tags: [cookbook, services]
    #   when: features.cookbook

    # - role: piper
    #   tags: [piper, voice, ai]
    #   when: features.piper

    # - role: voice_assistant
    #   tags: [voice, ai]
    #   when: features.voice_assistant

    # - role: backup
    #   tags: [backup]
    #   when: features.backup

    # - role: power_management
    #   tags: [power]
    #   when: features.power_monitoring

  post_tasks:
    - name: Copy maintenance scripts to target
      copy:
        src: ../scripts/
        dest: "{{ storage.base_dir | default('/opt/frey') }}/scripts/"
        mode: '0755'
      tags: always

    - name: Create maintenance reminder
      ansible.builtin.template:
        src: README_MAINTENANCE.sh.j2
        dest: "{{ storage.base_dir }}/README_MAINTENANCE.sh"
        mode: '0755'
      vars:
        health_check_urls: >
          {{ [
            'http://traefik.' ~ (network.domain_name | default('local')),
            'http://portainer.' ~ (network.domain_name | default('local')),
            'http://dockge.' ~ (network.domain_name | default('local'))
          ] + (network.dns_rewrites | default([])) | map(attribute='name') | map('regex_replace', '^(.*)$', 'http://\\1.' ~ (network.domain_name | default('local'))) | list }}

    - name: Display service URLs
      ansible.builtin.debug:
        msg: |
          üéØ DEPLOYMENT COMPLETED! Your services are available at:
          {% for service in (network.dns_rewrites | default([])) %}
          - http://{{ service.name }}.{{ network.domain_name | default('local') }}
          {% endfor %}

          üîë DEFAULT CREDENTIALS (CHANGE IMMEDIATELY!):
          qBittorrent:     admin / {{ media.qbittorrent.default_password }}
          Grafana:         admin / {{ monitoring.grafana.default_password }}
          Code Server:     Password: {{ media.code_server.default_password }}

          ‚ö° NEXT STEPS:
          1. Change all default passwords!
          2. Configure your media indexers in Prowlarr
          3. Set up monitoring dashboards in Grafana
          4. Access Dockge for easy container management

          üìñ Happy self-hosting! üè†‚ú®
      tags: always